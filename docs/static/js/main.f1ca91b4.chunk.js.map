{"version":3,"sources":["components/SearcBar.js","components/CustomItem.js","components/CustomList.js","components/CustomTabs.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","onSearchTextChanged","Form","Group","Control","size","type","placeholder","onChange","e","target","value","CustomItem","item","color","Card","Header","name","tags","map","tab","Badge","pill","variant","Body","Text","description","Footer","className","apptype","Button","href","more","url","CustomList","items","val","TAB_MAPPING","CustomTabs","content","Tabs","defaultActiveKey","Tab","eventKey","title","length","key","Object","keys","tabTitle","filter","category","Main","useState","allContent","setAllContent","filteredContent","setFilteredContent","useEffect","myData","undefined","toLowerCase","_filteredItems","includes","App","Container","Row","Col","xs","md","lg","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f1ca91b4.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Form } from 'react-bootstrap';\r\n\r\nfunction SearchBar({ onSearchTextChanged }) {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Form.Group>\r\n\t\t\t\t<Form.Control size=\"lg\" type=\"text\" placeholder=\"Search\" onChange={e => onSearchTextChanged(e.target.value)} />\r\n\t\t\t</Form.Group>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport { Card, Button, Badge } from 'react-bootstrap';\r\n\r\nfunction CustomItem({ item, color }) {\r\n\treturn (\r\n\t\t<Card>\r\n\t\t\t<Card.Header>{item.name}\r\n\r\n\t\t\t\t{\r\n\t\t\t\t\titem.tags.map(tab => <>\r\n\t\t\t\t\t\t{'  '}<Badge pill variant={color}>\r\n\t\t\t\t\t\t\t{tab}\r\n\t\t\t\t\t\t</Badge>\r\n\t\t\t\t\t</>)\r\n\t\t\t\t}\r\n\t\t\t</Card.Header>\r\n\t\t\t<Card.Body>\r\n\t\t\t\t<Card.Text>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\titem.description == \"\" ? \"No description available\" : item.description\r\n\t\t\t\t\t}\r\n\t\t\t\t</Card.Text>\r\n\t\t\t</Card.Body>\r\n\t\t\t<Card.Footer className=\"text-muted\">\r\n\t\t\t\t{\r\n\t\t\t\t\titem.apptype == \"url\" && <Button href={item && item.more && item.more.url} size=\"sm\" variant={color}>Go to the app</Button>\r\n\t\t\t\t}\r\n\t\t\t</Card.Footer>\r\n\t\t</Card>\r\n\t)\r\n}\r\n\r\nexport default CustomItem;","import React from 'react';\r\nimport CustomItem from './CustomItem';\r\nimport { Row, Col } from 'react-bootstrap';\r\n\r\nfunction CustomList({ items, color }) {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\titems.map(val => <div className=\"m-3\">\r\n\t\t\t\t\t<CustomItem item={val} color={color}/>\r\n\t\t\t\t</div>)\r\n\t\t\t}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default CustomList;","import React from 'react';\r\nimport CustomList from './CustomList';\r\nimport { Tabs, Tab } from 'react-bootstrap';\r\n\r\nconst TAB_MAPPING = {\r\n\t\"browser-app\": {\r\n\t\t\"color\": \"secondary\",\r\n\t\t\"tabTitle\": \"Browser Based Tools\"\r\n\t},\r\n\t\"documentation\": {\r\n\t\t\"color\": \"success\",\r\n\t\t\"tabTitle\": \"Documentation\"\r\n\t},\r\n}\r\n\r\nfunction CustomTabs({ content }) {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Tabs defaultActiveKey=\"all\">\r\n\t\t\t\t<Tab eventKey=\"all\" title={`All (${content.length})`}>\r\n\t\t\t\t\t<CustomList\r\n\t\t\t\t\t\tkey=\"all\"\r\n\t\t\t\t\t\titems={content}\r\n\t\t\t\t\t\tcolor={\"primary\"}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Tab>\r\n\t\t\t\t{\r\n\t\t\t\t\tObject.keys(TAB_MAPPING).map(key => (\r\n\t\t\t\t\t\t<Tab eventKey={key} title={TAB_MAPPING[key].tabTitle + ` (${content.filter(item => item.category == key).length})`}>\r\n\t\t\t\t\t\t\t<CustomList\r\n\t\t\t\t\t\t\t\tkey={key}\r\n\t\t\t\t\t\t\t\titems={content.filter(item => item.category == key)}\r\n\t\t\t\t\t\t\t\tcolor={TAB_MAPPING[key].color}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Tab>\r\n\t\t\t\t\t))\r\n\t\t\t\t}\r\n\t\t\t</Tabs>\r\n\r\n\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default CustomTabs;","import React, { useState, useEffect } from 'react';\r\nimport SearchBar from './SearcBar';\r\nimport CustomTabs from './CustomTabs';\r\nimport myData from './../content.json';\r\n\r\nfunction Main() {\r\n\tconst [allContent, setAllContent] = useState([]);\r\n\tconst [filteredContent, setFilteredContent] = useState([]);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetAllContent(myData);\r\n\t\tsetFilteredContent(myData);\r\n\t}, []);\r\n\r\n\tconst onSearchTextChanged = value => {\r\n\t\tvalue = value.toLowerCase();\r\n\r\n\t\tif (value == undefined || value == null || value == \"\") {\r\n\t\t\tsetFilteredContent(allContent);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet _filteredItems = allContent.filter(item => {\r\n\t\t\t\tif (item.name.toLowerCase().includes(value)) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\telse if (item.description.toLowerCase().includes(value)) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\telse if (item.tags.includes(value)) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tsetFilteredContent(_filteredItems)\r\n\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"p-4\">\r\n\t\t\t<SearchBar onSearchTextChanged={onSearchTextChanged} />\r\n\t\t\t<CustomTabs content={filteredContent} />\r\n\t\t</div>\r\n\t)\r\n\r\n}\r\n\r\nexport default Main;","import React from 'react';\nimport './App.css';\nimport Main from './components/Main';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Row, Col } from 'react-bootstrap';\n\nfunction App() {\n  return (\n    <Container>\n      <Row>\n        <Col />\n        <Col xs={12} md={10} lg={10}>\n          <Main />\n        </Col>\n        <Col />\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}